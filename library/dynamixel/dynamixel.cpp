#include "Arduino.h"
#include "dynamixel.h"
#include "SoftwareSerial.h"
//The main class for the motor
dynamixel::dynamixel(uint8_t id)
{
  _id = id;
}
//All the basic functions
void dynamixel::ledOn(){
  //Constructing the packet for the motor
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x06, 0x00, 0x04, 0x41, 0x00, 0x01};
  //Sending Package to motor via function
  sendPckg(message, sizeof(message));
  //Delay .004 seconds, otherwise wont work.
  delay(4);
};
//Same thing for every other pckg basically
void dynamixel::ledOff(){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x06, 0x00, 0x04, 0x41, 0x00, 0x00};
  sendPckg(message, sizeof(message));
  delay(4);
}
void dynamixel::action(){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x03, 0x00, 0x05};
  sendPckg(message, sizeof(message));
  delay(4);
}
void dynamixel::torgueDisable(){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x06, 0x00, 0x04, 0x40, 0x00, 0x00};
  sendPckg(message, sizeof(message));
  delay(4);
}
void dynamixel::torgueEnable(){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x06, 0x00, 0x04, 0x40, 0x00, 0x01};
  sendPckg(message, sizeof(message));
  delay(4);
}
void dynamixel::goalVel(int velocity){
  //Support for negative values
  //Negative values is expressed as "FF, FF + value"
  if (velocity < 0){
    uint8_t vel = 256 + velocity;
    uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x09, 0x00, 0x04, 0x68, 0x00, 255 + velocity ,0xff,0xff,0xff};
    sendPckg(message, sizeof(message));
    delay(4);
  }else{
    uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x09, 0x00, 0x04, 0x68, 0x00, velocity,0x00,0x00,0x00};
    sendPckg(message, sizeof(message));
    delay(4);
  }}

void dynamixel::changeMode(int mode){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x06, 0x00, 0x04, 0x0B, 0x00, mode};
  sendPckg(message, sizeof(message));
  delay(4);
}

void dynamixel::goalPos(uint16_t pos){
  //Converts from deg to 4095 steps
  pos = uint16_t(double(float(4096)/float(360))*pos);
  uint8_t array[2];
  //Splits 16 bite variable up into 2 8 bit variables
  array[0]=pos & 0xff;
  array[1]=(pos >> 8);
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x09, 0x00, 0x04, 0x74, 0x00, array[0] ,array[1],0,0};
  sendPckg(message, sizeof(message));
  
  delay(4);
}
void dynamixel::velLimit(uint16_t limit){
  uint8_t array[2];
  //Splits 16 bite variable up into 2 8 bit variables
  array[0]=limit & 0xff;
  array[1]=(limit >> 8);
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x09, 0x00, 0x04, 0x2C, 0x00, array[0] ,array[1],0,0};
  sendPckg(message, sizeof(message));
  
  delay(4);
}
void dynamixel::pwmLimit(uint16_t limit){
  //Splits 16 bite variable up into 2 8 bit variables
  uint8_t array[2];
  array[0]=limit & 0xff;
  array[1]=(limit >> 8);
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x04, 0x24, 0x00, array[0] ,array[1]};
  sendPckg(message, sizeof(message));
  
  delay(4);
}
void dynamixel::getPos(){

uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x02, 0x7e, 0x00, 0x02, 0x00};
  sendPckg(message, sizeof(message));
  //Serial.print("ok");
}

void dynamixel::reboot(){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x03, 0x00, 0x08};
  sendPckg(message, sizeof(message));
  delay(50);
}
void dynamixel::setPID(uint16_t P, uint16_t I, uint16_t D){
  //Setting the PID values
  uint8_t array[2];
  array[0]=P & 0xff;
  array[1]=(P >> 8);
  uint8_t messageP[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x04, 0x54, 0x00, array[0] ,array[1]};
  array[0]=I & 0xff;
  array[1]=(I >> 8);
  uint8_t messageI[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x04, 0x52, 0x00, array[0] ,array[1]};
  array[0]=D & 0xff;
  array[1]=(D >> 8);
  uint8_t messageD[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x04, 0x50, 0x00, array[0] ,array[1]};
  sendPckg(messageP, sizeof(messageP));
  delay(4);
  action();
  sendPckg(messageI, sizeof(messageI));
  delay(4);
  action();
  sendPckg(messageD, sizeof(messageD));
  delay(4);
  action();
}

void dynamixel::getVel(){
  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x02, 0x80, 0x00, 0x04, 0x00};
  sendPckg(message, sizeof(message));
  //Serial.print("ok");
}
  
void dynamixel::getAmp(){

  uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x02, 0x7e, 0x00, 0x02, 0x00};
  sendPckg(message, sizeof(message));
  //Serial.print("ok");
}

void dynamixel::goalPWM(int pwm){
  
  if (pwm < 0){
 uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x04, 0x64, 0x00, 0x00, 0xFF};
 sendPckg(message, sizeof(message));
  }else{
uint8_t message[] = {0xFF, 0xFF, 0xFD, 0x00, _id, 0x07, 0x00, 0x04, 0x64, 0x00, 0x00, 0x01};
sendPckg(message, sizeof(message));
  }
  
  
}
//Function for calculating CRC. Dunno how it works, got it directly from dynamixel.
uint16_t dynamixel::compute_crc(uint16_t crc_accum, uint8_t* data_blk_ptr, size_t data_blk_size)
{
    uint16_t  crc_table[] = {
    0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
    0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
    0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
    0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
    0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
    0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
    0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
    0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
    0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
    0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
    0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
    0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
    0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
    0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
    0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
    0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
    0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
    0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
    0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
    0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
    0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
    0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
    0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
    0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
    0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
    0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
    0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
    0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
    0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
    0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
    0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
  size_t i, j;

  for (j = 0; j < data_blk_size; j++)
  {
    i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
    crc_accum = (crc_accum << 8) ^  crc_table[i];
  }
  return crc_accum;
}
void dynamixel::sendPckg(uint8_t msg[], int msgSize){
  SoftwareSerial mySerial(10, 11); 
  mySerial.begin(57600);
  //Calculates length, only to show that we know what each section in package does. Coulda used msgSize+2 but chose not to. 
  int message_length = msg[5] + 7;
  uint16_t computed_crc = compute_crc(0, msg, message_length - 2);//Could really have used msgSize here, but chose not to again cuz package and stuff.
  //Doest really make any differene anyway, except make for more convoluted code.
  //But that's life
  uint8_t array[2];
  array[0]=computed_crc & 0xff;
  array[1]=(computed_crc >> 8);
  uint8_t msg1[msgSize+2]; //Using msgSize, because nobody wants consistency. 
  //Please do not judge us for inconsistent idiotic code. We know, we just did not have time to fix and test...


  //Filling new array with values of old one
  for (int i = 0; i < msgSize; i++){
    msg1[i]=msg[i];
  }
  //Fillind end of array with the new CRC code.
  msg1[msgSize] = array[0]; 
  msg1[msgSize+1] = array[1];
  //Sends of the array in bytes via built-in Arduino Functions...
  mySerial.write(msg1,sizeof(msg1));

}
